name: Update Repo
on:
  push:
    branches:
      - '**'         # Match pushes to any branch (even feat/feature)
jobs:
  repo-test:
    runs-on: ubuntu-latest
    steps:
      # Step 0: set env.tag for action to simulate real use
      - name: Set env.tag for action to v0.0.30
        run: |
          echo "tag=v0.0.30" >> $GITHUB_ENV

      # Step 1: Checkout the current repository
      - name: Checkout current repository
        uses: actions/checkout@v4

      # Step 2: Create 'pdfix-version-updates' directory if it doesn't exist
      - name: Create 'pdfix-version-updates' directory
        run: mkdir -p pdfix-version-updates

      # Step 3: Checkout the 'pdfix-version-updates' repository into the 'pdfix-version-updates' directory using the PAT
      - name: Checkout 'pdfix-version-updates' repository
        uses: actions/checkout@v4
        with:
          repository: pdfix/pdfix-version-updates
          path: pdfix-version-updates
          token: ${{ secrets.PAT_VERSIONS }}
          ref: main
          fetch-depth: 0 

      # Step 4: List all files and folders in the current repository
      - name: List files in the current repository
        run: |
          cd pdfix-version-updates
          echo "Listing files in the pdfix-version-updates repository:"
          ls -la

      # Step 5: Update action in 'v1/versions.json'
      - name: Update 'v1/versions.json'
        run: |
          cd pdfix-version-updates/v1
          jq '(.["pdfix-actions"][] | select(.name == "pdfix/pdf-accessibility-paddle")) |= . + {"version": "${{ env.tag }}", "release_date": "$(date +%Y-%m-%d)"}' versions.json > tmp.json
          mv tmp.json versions.json
          cat versions.json

      # Step 6: Commit action update
      - name: Commit and Push changes
        run: |
          cd pdfix-version-updates
          git config user.name "PDFix Support"
          git config user.email "support@pdfix.net"
          git add v1/versions.json
          echo "git commit -m "pdfix/pdf-accessibility-paddle ${{ env.tag }}"
          git commit -m "pdfix/pdf-accessibility-paddle ${{ env.tag }}"
          # git push

      # Step 8: Tag latest commit
      - name: Tag the commit
        run: |
          cd pdfix-version-updates
          git pull
          # Check if HEAD already has a tag
          if git describe --exact-match --tags HEAD > /dev/null 2>&1; then
            echo "HEAD already has a tag â€” skipping tagging."
          else
            # Get the latest tag
            latest_tag=$(git tag -l "v*.*.*" | sort -V | tail -n 1)
            echo "Latest tag is: $latest_tag"
            # Strip the 'v' and split into major, minor, patch
            version=${latest_tag#v}
            IFS='.' read -r major minor patch <<< "$version"
            # Increment the patch version
            patch=$((patch + 1))
            new_tag="v$major.$minor.$patch"
            # git tag -a "$new_tag" -m "Release $new_tag"
            # git push origin "$new_tag"
            echo "Tagged HEAD with: $new_tag"
          fi